package by.TMS_Dudak.Lesson10;

public class Lecture {
    public static void main(String[] args) {
        String line = "line"; //литерал - мы можем создать их только у стрингов
        String lineRus = "лини";//Так происходит интернирование на этапе компиляции и попадает в стрингпул
        String newLine = new String("Line"); //Конструктор !! .intern() но так не надо делать, лучше сразу литтералы
        //Heap - тут создаются все обхекты и наши переменные сслыаются на области памяти.
        //есть область памяти в хиппи стрингпул

        System.out.println(line.getBytes().length);//тут 4 байта
        System.out.println(lineRus.getBytes().length);//тут 8 байтов

        System.out.println(newLine == line);//false


        //на ронтайме объект созлается и идет в хиппи
        //если есть new то летит в хиппи

        String lineTop = "LineTop";//положил в стрингпул
        String top= "Top";//положил в стрингпул
        String newline1 = "Line"+top; //ее результат формируется в ронтайме и ее нет пока в стрингпуле
        System.out.println(lineTop==newline1);
        //класс стринг - файнал
        //добавить хип можно принудительно!!!!!!!!!
        //интренирование не рекомендуется
        //дедупликация -- ссылка на массив элементов в очеред??? короче почитай про:
        //1) Интренирвание!!
        //2) Дидупликация!!!
        //3) Просто про стрингр на этом сайте
        //https://topjava.ru/blog/rukovodstvo-po-string-pool-v-java
        //HashMap


        //lineTrim.
        //можно проавлится в стрип и увидеть что стрип убирает пробелы и он показывает что жто за пробелы
        //можно зайти в метод трим и
        //strip - убирает пробелы в начале и в конце, он сильней чем трим
        //valueOf - переопределяет в строку
        //equals - сравнивает значение символов в массиве(в строке короче) (см л4 все задачи)
        //concat - аналог склеивания строк одной с другой (+...+...+) но он возращает другую строку.
        // строка + вторая строка = третья строка
        // join -
        // compareTo - может вернуть положительное значение, отриацительное значение или 0
        // сравниваем символы но имеенно как "а = 012"
        // equalsIgnoreCase - игнорирует регистр и сравнивает например ФВы == фвы - это будет тру
        // getChars(srcBegin, srcEnd, result, с какого индекса класть)
        // создаем стринг --- создаем массив  --- используем этот метод чтобы вырезать часть текста и скопировать
        // split - ищет в стринге разделитель вырезает и кладет в массив
        // indexOf - можно передовать как индекс как и символ и возращает индекс первого вхождения символа (если ничего не
        // найдет то возращает -1)
        // StartsWith - проверяет с чего начинается строка
        // replace - меняет значение того что ввели на другое
        // substring - вырезаем подстроку, он ссылается на кусочек памяти (массива) а не создает новый кусок памяти
        // прикольненькая штучка дрючка такая даааа -_-
        // String Builder - позволяет строить строку не создавая много промежуточных объектов
        // для того чтобы создать вызывается конструктор: StringBuilder builder = new StringBuilder()
        // isBlank не учитывает пробелы и табуляции и проверят на пустоту
        // isEmpty
        // builder.append.

    }
}
